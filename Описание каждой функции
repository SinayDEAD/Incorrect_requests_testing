Описание каждой функции:

def send_invalid_method(url) - В случае, если сервер обнаруживает недопустимый метод, он может вернуть ошибку.
В этом случае функция возвращает объект requests.Response с информацией об ошибке.
Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает текстовую строку с описанием ошибки.


def send_invalid_version(url) - send_invalid_request создает соединение http.client.urlsplit с указанным URL и затем непосредственно изменяет версию HTTP на некорректную.
Затем она отправляет некорректный запрос методом GET. Если сервер обнаруживает неправильную версию HTTP, он может вернуть ошибку "invalid version".
В этом случае функция возвращает объект http.client.HTTPResponse с информацией об ошибке.


def send_invalid_protocol(url) - создаётся собственный адаптер InvalidProtocolAdapter.
Также создаётся сессию requests.Session() и монтируется адаптер с помощью метода mount(). В результате все запросы через эту сессию будут использовать
наш адаптер и отправлять запрос с некорректным заголовком протоколом. В этом случае функция возвращает объект requests.Response с информацией об ошибке.
Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает текстовую строку с описанием ошибки


def send_invalid_page(url) - отправляется GET-запрос на указанный URL с добавлением "/nonexistent_page"
в конец пути запроса. Таким образом, это попытка обратиться к несуществующей странице на сервере. Если сервер
обнаруживает, что запрошенная страница не существует, он может вернуть ошибку "non-existent page". В этом случае
функция возвращает объект requests.Response с информацией об ошибке. Если возникает ошибка при отправке запроса (requests.exceptions.RequestException),
функция возвращает текстовую строку с описанием ошибки.


def send_invalid_parameters(url) - отправляется GET-запрос на указанный URL с некорректным параметром запроса. В данном случае, добавляется параметр
invalid_param с произвольным значением "value". Если сервер обнаруживает некорректный параметр или его отсутствие, он может вернуть ошибку "incorrect
parameters". В этом случае функция возвращает объект requests.Response с информацией об ошибке.


def send_invalid_method(url) - отправляется DELETE-запрос с использованием созданного сеанса и указанных заголовков.
Если сервер обнаруживает некорректный метод в заголовке, он может вернуть ошибку "incorrect method". В этом случае функция возвращает
объект requests.Response с информацией об ошибке.


def send_http2_request(url) - send_invalid_request использует httpx.Client с параметром http2=True,
чтобы создать клиентское подключение с поддержкой HTTP/2. Затем она отправляет GET-запрос на указанный
URL с помощью метода client.get(). Если сервер не поддерживает HTTP/2 или обнаруживает некорректный запрос, может быть возвращена ошибка.
В этом случае функция возвращает объект httpx.Response с информацией об ошибке. Если возникает ошибка при отправке запроса (httpx.RequestError),
функция возвращает текстовую строку с описанием ошибки.


def send_big_length(url) - функция send_invalid_request отправляет GET-запрос на указанный URL с некорректным значением заголовка Content-Length.
Здесь мы устанавливаем значение 999999 для Content-Length, что является некорректным и может привести к ошибке "Invalid Content-Length" на сервере.
Если сервер обнаруживает некорректное значение Content-Length, он может вернуть ошибку. В этом случае функция возвращает объект requests.Response с
информацией об ошибке. Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает текстовую строку с
описанием ошибки.
(если не достаточно ресурсов или малейший конфликт или скачок будет выдать ошибку EOF occurred in violation of protocol (_ssl.c:2423))


def send_invalid_UserAgent(url) - send_invalid_request отправляет GET-запрос на указанный URL с некорректным значением заголовка User-Agent.
Здесь мы устанавливаем значение "Invalid User-Agent", которое является некорректным и может привести к ошибке "Invalid User-Agent" на сервере.
Если сервер обнаруживает некорректное значение User-Agent, он может вернуть ошибку. В этом случае функция возвращает объект requests.Response с
информацией об ошибке. Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает текстовую строку с описанием ошибки.


def send_invalid_type(url) - send_invalid_request отправляет GET-запрос на указанный URL с некорректным значением заголовка Content-Type.
Здесь мы устанавливаем значение "application/invalid", которое является некорректным и может привести к ошибке "Invalid Content-Type"
на сервере. Если сервер обнаруживает некорректное значение Content-Type, он может вернуть ошибку. В этом случае функция возвращает объект
requests.Response с информацией об ошибке. Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает
текстовую строку с описанием ошибки.


def send_invalid_encoding(url) - отправляется POST-запрос с некорректными фрагментами в теле запроса. Указывается заголовок "Content-Type" со значением "text/plain",
чтобы указать серверу о типе передаваемых данных. Затем формируется некорректные фрагменты в теле запроса путем объединения списка фрагментов
в одну строку и добавления этой строки перед данными запроса.


def send_invalid_cash(url) - создается адаптер InvalidCacheControlAdapter, который наследуется от requests.adapters.HTTPAdapter.
Переопределяется метод add_headers(), чтобы он устанавливал некорректное значение "invalid" для заголовка Cache-Control. Затем создаётся сессия
requests.Session() и монтируем наш адаптер на схемы "http://" и "https://" с помощью метода mount(). В результате все запросы через эту сессию будут
использовать наш адаптер и отправлять запрос с некорректным заголовком Cache-Control.


def send_invalid_null(url) - преобразуем в объект urllib.parse.ParseResult, а затем обрабатывает путь (path) в байтовую строку.
Затем она добавляет нулевой байт (b'\x00') в путь и обновляет путь в объекте ParseResult. Затем она преобразует обновленный объект ParseResult
обратно в URL и отправляет запрос с помощью requests.get().


def send_invalid_delete(url) - GET-запрос на указанный URL без заголовка "Cookie". В этом случае функция возвращает объект requests.Response с
информацией об ошибке. Если возникает ошибка при отправке запроса (requests.exceptions.RequestException), функция возвращает текстовую строку с описанием ошибки.


def send_invalid_crlf(url) - Создается заголовок Invalid-Header со значением "Invalid-Value\nContent-Type: application/json".
Символ \n представляет символ перевода строки, который мы вводим непосредственно в значение заголовка.

def send_invalid_request_body(url) - POST-запрос с некорректным телом запроса <invalid_payload> и заголовком "Content-Type": "application/json"


def send_invalid_request_body_length(url)-  POST-запрос с некорректной длиной тела запроса. Указывается заголовок "Content-Length"
с некорректным значением, которое меньше фактической длины тела запроса. В результате сервер может обработать такой запрос как некорректный
из-за несоответствия длины тела и вызвать ошибку.


def send_invalid_gzip(url) - POST-запрос с неправильно сжатыми данными. Указывается заголовок "Content-Encoding" со значением "gzip",
чтобы указать серверу, что данные сжаты в формате Gzip. Однако, мы не сжимаем данные правильно, а просто используем zlib.compress()
для создания неправильно сжатых данных.


def send_invalid_delimiters(url) - POST-запрос с некорректными разделителями в теле запроса. Указывается заголовок "Content-Type"
со значением "application/x-www-form-urlencoded", чтобы указать серверу о типе передаваемых данных. Затем мы формируем некорректные
разделители в теле запроса путем добавления "%%%" перед данными и "###" после данных.


def send_invalid_fragments(url) - POST-запрос с пустым значением "Content-Length" в заголовке запроса. Указывается заголовок
"Content-Type" со значением "text/plain", чтобы указать серверу о типе передаваемых данных. Передаем фактическое тело запроса payload,
но не указываем его длину


def send_invalid_missed(url) - POST-запрос с пустым значением "Content-Length" в заголовке запроса. Указывается заголовок
"Content-Type" со значением "text/plain", чтобы указать серверу о типе передаваемых данных. Передаем фактическое тело запроса payload,
но не указываем его длину


def send_invalid_json(url) -  отправляем POST-запрос с некорректным телом запроса invalid_payload,
которое не является правильным JSON. Указывается заголовок "Content-Type" со значением "application/json",
чтобы указать серверу о типе передаваемых данных. Однако, само тело запроса invalid_payload не будет правильным JSON


def send_invalid_format(url)- отправляем POST-запрос с некорректным телом запроса invalid_payload, которое не соответствует ожидаемому формату
для указанного заголовка Content-Type. Указывается заголовок "Content-Type" со значением "application/octet-stream", чтобы указать серверу
о типе передаваемых данных. Однако, само тело запроса invalid_payload не будет соответствовать ожидаемому формату.


def send_invalid_big_body(url) - отправляем POST-запрос с некорректным значением заголовка Content-Length.
Значение "99999999999" является неправильным и представляет собой слишком большое значение.
Однако, requests может автоматически корректировать значение Content-Length на основе фактического размера передаваемых данных,
и сервер может отклонить такой некорректный запрос до его отправки.
